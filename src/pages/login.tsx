import Head from "next/head";
import React, { useContext, useState } from "react";
import { useRouter } from "next/router";
import axios from "axios";
import Context from "../context/context";

interface Data {
  data: {
    email?: String;
    isLogged: boolean;
  };
}

export async function getServerSideProps({ req, res }: any) {
  const cookies = req.headers.cookie || "";
  // const token = jwt.decode(cookies.split("=")[1]);
  const token = cookies.split("=")[1];

  // const isValid = jwt.verify(cookies.split("=")[1])
  const resp: Data = await axios.post(
    "http://localhost:5000/verify-token",
    { token: token },
    {
      withCredentials: true,
      method: "POST",
    }
  );

  console.log(resp.data);

  if (resp.data.isLogged) {
    console.log("daioshdoisahdiashdiasidhi");
    return {
      redirect: {
        permanent: false,
        destination: "/",
      },
      props: {},
    };
  }

  return {
    props: {
      isLogged: resp.data.isLogged,
      // isLogged: false,
    },
  };
}

const Login = () => {
  const [error, setError] = useState(false);
  const [showPass, setShowPass] = useState(false);

  const darkModeAndCookie = useContext(Context);

  const router = useRouter();

  const handleLogin = async (event: React.SyntheticEvent) => {
    event.preventDefault();

    const email = (event?.target as any).email.value;
    const password = (event?.target as any).password.value;

    if (email === "" || password === "") {
      setError(true);
      return;
    }

    const data = {
      email,
      password,
    };

    let headers = new Headers();
    headers.append("Content-Type", "application/json");
    headers.append("Accept", "application/json");

    // const resp = await fetch("http://localhost:5000/login", {
    //   method: "POST",
    //   mode: "cors",
    //   // redirect: "follow",
    //   credentials: "include", // Don't forget to specify this if you need cookies
    //   headers: headers,
    //   body: JSON.stringify(data),
    // });
    const resp: any = await axios.post("http://localhost:5000/login", data, {
      withCredentials: true,
      method: "POST",
    });

    if (resp.status === 200) {
      const changeHasCookie = darkModeAndCookie[3];
      changeHasCookie(true);
      router.push("/");
    }

    console.log(resp);
  };

  return (
    <div className="center">
      <Head>
        <title>Login</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <h2 className="title mb-8">LOGIN</h2>
      {error && <h2 className="text-error">Email or Password Wrong</h2>}
      <form onSubmit={handleLogin}>
        <div>
          <input
            className="inputStyle mb-2 dark:text-textLight"
            type="text"
            name="email"
            placeholder="email"
          />
        </div>
        <div>
          <div>
            <input
              className="inputStyle dark:text-textLight"
              type={showPass ? "text" : "password"}
              name="password"
              placeholder="password"
            />
          </div>
          <div className="mt-2 flex items-center justify-center">
            <input
              onChange={() => setShowPass((prev) => !prev)}
              className="mr-2"
              type="checkbox"
              id="showPas"
              name="showPas"
            />
            <label htmlFor="showPas">Show password</label>
          </div>
        </div>

        <button className="btn mt-6">Submit</button>
      </form>
    </div>
  );
};

export default Login;
